AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Storer Basic Event Store

Metadata:
  AWS::ServerlessRepo::Application:
    Name: storer-event-store
    Description: Serverless Event Store on top of DynamoDB and S3
    Author: Reda Laanait
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README.md
    Labels: ['event-store', 'event-sourcing', 'ddd', 'dynamodb', 's3']
    HomePageUrl: https://github.com/ln80/storer/stacks/basic
    SemanticVersion: 0.0.1
    SourceCodeUrl: https://github.com/ln80/storer/stacks/basic

Globals:
  Function:
    Timeout: 5
    Runtime: go1.x

Parameters:
  AppPrefix:
    Type: String
    Default: ""
  
  ForwardQueueMap:
    Type: String
    Default: ""

  DynamoDBBillingMode:
    Type: String
    Default: PAY_PER_REQUEST
    AllowedValues:
      - PROVISIONED
      - PAY_PER_REQUEST
  DynamoDBReadCapacity:
    Type: Number
    Default: 0
  DynamoDBWriteCapacity:
    Type: Number
    Default: 0
  
  S3PartitionMinSize:
    Type: Number
    Default: 10000

  AlarmSNSTopic:
    Type: String
    Default: ""

  # AlarmFallbackEmail:
  #   Type: String
  #   AllowedPattern:  '/[^\s@]+@[^\s@]+\.[^\s@]+/'
  #   ConstraintDescription: You should enter a valid email

Conditions:
  EnableAlarm: !Not
    - !Equals
      - !Ref AlarmSNSTopic
      - ''

Resources:
  EventTable:
    Type: AWS::DynamoDB::Table
    Properties:
        TableName: !Sub ${AppPrefix}-event-table
        AttributeDefinitions:
          -
            AttributeName: _pk
            AttributeType: S
          -
            AttributeName: _sk
            AttributeType: S
        KeySchema:
          -
            AttributeName: _pk
            KeyType: HASH
          -
            AttributeName: _sk
            KeyType: RANGE
        TimeToLiveSpecification:
            AttributeName: _ttl
            Enabled: true
        BillingMode: !Ref DynamoDBBillingMode
        ProvisionedThroughput:
          ReadCapacityUnits: !Ref DynamoDBReadCapacity
          WriteCapacityUnits: !Ref DynamoDBWriteCapacity
        StreamSpecification:
          StreamViewType: NEW_IMAGE

  EventBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AppPrefix}-event-bucket

  InternalWorkQueue:
    Type: AWS::SQS::Queue
    Properties:
        QueueName: !Sub ${AppPrefix}-internal-queue.fifo
        FifoQueue: true
        ReceiveMessageWaitTimeSeconds: 20
        VisibilityTimeout: 180

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
        # QueueName: !Sub ${AppPrefix}-internal-gstm-dlq.fifo
        QueueName: !Sub ${AppPrefix}-internal-dlq
        # FifoQueue: true
        ReceiveMessageWaitTimeSeconds: 20
        VisibilityTimeout: 180

  # POLICIES:

  EventWritePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Action: dynamodb:PutItem
            Resource:
              - !Sub 
                  - "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}"
                  - tableName: !Ref EventTable
              - !Sub 
                  - "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${EventTable}/index/*"
                  - tableName: !Ref EventTable

  EventReadPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Query
              - s3:GetObject
            Resource:
              - !Sub 
                  - "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}"
                  - tableName: !Ref EventTable
              - !Sub 
                  - "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*"
                  - tableName: !Ref EventTable
              - !Sub 
                  - "arn:${AWS::Partition}:s3:::${bucketName}/*"
                  - bucketName: !Ref EventBucket

  # LAMBDA FUNCTIONS:
  
  ForwarderFunction:
    Type: AWS::Serverless::Function
    # DependsOn: CloudWatchAlarmSNSTopic
    Properties:
      FunctionName: !Sub ${AppPrefix}-ForwarderFunction
      CodeUri: forwarder/
      Handler: forwarder
      Events:
        StreamEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt EventTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BisectBatchOnFunctionError: false
            ParallelizationFactor: 1
            MaximumRecordAgeInSeconds: -1 # confirm default value
            MaximumRetryAttempts: -1 # confirm default value
            DestinationConfig:
              OnFailure:
                Destination: !GetAtt DeadLetterQueue.Arn
            FilterCriteria:
              Filters:
                - Pattern: '{"eventName": ["INSERT"], "dynamodb": { "Keys" : {"_pk": {"S": [{"anything-but": [ "internal" ]}]}}}}'
      Policies:
        - AWSLambdaDynamoDBExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref EventTable
        - S3WritePolicy:
            BucketName: !Ref EventBucket
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'sqs:SendMessage*'
              Resource: !Sub "arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:*"
      Environment:
          Variables:
            SQS_PUBLISH_QUEUES: !Ref ForwardQueueMap
            S3_BUCKET: !Ref EventBucket
            DYNAMODB_TABLE: !Ref EventTable

  SchedularFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppPrefix}-SchedularFunction
      CodeUri: schedular/
      Handler: schedular
      Events:
        InvocationEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0 0 * * ? *)
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EventTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt InternalWorkQueue.QueueName
      Environment:
          Variables:
            DYNAMODB_TABLE: !Ref EventTable
            SQS_QUEUE:  !GetAtt InternalWorkQueue.QueueName

  InternalWorkFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppPrefix}-InternalWorkFunction
      Timeout: 30
      CodeUri: worker/
      Handler: worker
      Events:
        EventJobEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt InternalWorkQueue.Arn
            BatchSize: 1
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref EventBucket
      Environment:
          Variables:
            S3_BUCKET: !Ref EventBucket
            SQS_QUEUE:  !GetAtt InternalWorkQueue.QueueName
            S3_PARTITION_MIN_SIZE: !Ref S3PartitionMinSize

# ALARMS:

  SchedularCloudWatchAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Condition: EnableAlarm
    Properties:
      ActionsEnabled: true
      AlarmDescription: !Sub 'Schedule internal work task has failed.'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Sub ${AppPrefix}-SchedularFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 30
      Statistic: Sum
      Threshold: 1
      AlarmActions:
        - !Ref AlarmSNSTopic

  InternalWorkCloudWatchAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Condition: EnableAlarm
    Properties:
      ActionsEnabled: true
      AlarmDescription: !Sub 'Process internal work has failed.'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Sub ${AppPrefix}-InternalWorkFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 30
      Statistic: Sum
      Threshold: 1
      AlarmActions:
        - !Ref AlarmSNSTopic

  ForwarderCloudWatchAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Condition: EnableAlarm
    Properties:
      ActionsEnabled: true
      AlarmDescription: !Sub 'Save events in S3 or forward to external queues has failed.'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Sub ${AppPrefix}-ForwarderFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 30
      Statistic: Sum
      Threshold: 1
      AlarmActions:
        - !Ref AlarmSNSTopic

  # DeadLetterQueuePolicy:
  #   Type: AWS::SQS::QueuePolicy
  #   Properties:
  #     Queues:
  #       - !Ref DeadLetterQueue
  #     PolicyDocument:
  #       Statement:
  #         Effect: Allow
  #         Principal:
  #           Service: sns.amazonaws.com
  #         Action: "SQS:SendMessage"
  #         Resource: !GetAtt DeadLetterQueue.Arn
  #         Condition:
  #           ArnEquals:
  #             "aws:SourceArn": !Ref GlobalStreamDeadLetterTopic

  # GlobalStreamDeadLetterTopic:
  #   Type: AWS::SNS::Topic
  #   Properties:
  #     FifoTopic: true
  #     DisplayName: !Sub ${AppPrefix}-internal-gstm-dlq.fifo
  #     TopicName: !Sub ${AppPrefix}-internal-gstm-dlq.fifo
  #     # Subscription:
  #     #   - Endpoint: !GetAtt DeadLetterQueue.Arn
  #     #     Protocol: sqs

  # GlobalStreamDeadLetterSubscription:
  #   Type: 'AWS::SNS::Subscription'
  #   Properties:
  #     TopicArn: !Ref GlobalStreamDeadLetterTopic
  #     Endpoint: !GetAtt 
  #       - DeadLetterQueue
  #       - Arn
  #     Protocol: sqs
  #     RawMessageDelivery: 'true'
      
  # CloudWatchAlarmSNSTopic:
  #   Type: AWS::SNS::Topic
  #   Properties:
  #     DisplayName: !Sub ${AppPrefix}-cloudwatch-alarm
  #     TopicName: !Sub ${AppPrefix}-cloudwatch-alarm
  #     Subscription:
  #       - Endpoint: laanait.reda@gmail.com
  #         Protocol: email

Outputs:
  EventTable:
    Description: "Event Table"
    Value: !Ref EventTable

  EventBucket:
    Description: "Event Bucket"
    Value: !Ref EventBucket

  EventWritePolicy:
    Description: "Event Write Policy"
    Value: !Ref EventWritePolicy

  EventReadPolicy:
    Description: "Event Read Policy"
    Value: !Ref EventReadPolicy
